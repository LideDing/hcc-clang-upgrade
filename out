diff --git a/auto_merge_201711171113:lib/CodeGen/CodeGenFunction.h b/clang/amd-common:lib/CodeGen/CodeGenFunction.h
index dc56ebd..01c35bb 100644
--- a/auto_merge_201711171113:lib/CodeGen/CodeGenFunction.h
+++ b/clang/amd-common:lib/CodeGen/CodeGenFunction.h
@@ -433,7 +433,7 @@ public:
   };
 
   /// i32s containing the indexes of the cleanup destinations.
-  llvm::Instruction *NormalCleanupDest;
+  llvm::AllocaInst *NormalCleanupDest;
 
   unsigned NextCleanupDestIndex;
 
@@ -448,8 +448,8 @@ public:
   llvm::Value *ExceptionSlot;
 
   /// The selector slot.  Under the MandatoryCleanup model, all landing pads
-  /// write the current selector value into this instruction.
-  llvm::Instruction *EHSelectorSlot;
+  /// write the current selector value into this alloca.
+  llvm::AllocaInst *EHSelectorSlot;
 
   /// A stack of exception code slots. Entering an __except block pushes a slot
   /// on the stack and leaving pops one. The __exception_code() intrinsic loads
@@ -484,11 +484,11 @@ public:
 
     /// An i1 variable indicating whether or not the @finally is
     /// running for an exception.
-    llvm::Instruction *ForEHVar;
+    llvm::AllocaInst *ForEHVar;
 
     /// An i8* variable into which the exception pointer to rethrow
     /// has been saved.
-    llvm::Instruction *SavedExnVar;
+    llvm::AllocaInst *SavedExnVar;
 
   public:
     void enter(CodeGenFunction &CGF, const Stmt *Finally,
@@ -1950,13 +1950,6 @@ public:
                             TBAAAccessInfo *TBAAInfo = nullptr);
   LValue EmitLoadOfPointerLValue(Address Ptr, const PointerType *PtrTy);
 
-  /// Create an alloca instruction. If the target address space for auto var
-  /// for the specific language does no match the address space of alloca,
-  /// insert addrspacecast instruction which casts the alloca instruction to
-  /// the expected address space.
-  llvm::Instruction *CreateAlloca(llvm::Type *Ty, const Twine &Name = "tmp",
-                                  llvm::Instruction *InsertPos = nullptr);
-
   /// CreateTempAlloca - This creates an alloca and inserts it into the entry
   /// block if \p ArraySize is nullptr, otherwise inserts it at the current
   /// insertion point of the builder. The caller is responsible for setting an
@@ -1987,9 +1980,6 @@ public:
                            const Twine &Name = "tmp",
                            llvm::Value *ArraySize = nullptr,
                            bool CastToDefaultAddrSpace = true);
-  /// Get alloca instruction operand of an addrspacecast instruction.
-  /// If \p Inst is alloca instruction, returns \p Inst;
-  llvm::AllocaInst *getAddrSpaceCastedAlloca(llvm::Instruction *Inst) const;
 
   /// CreateDefaultAlignedTempAlloca - This creates an alloca with the
   /// default ABI alignment of the given LLVM type.
@@ -3970,9 +3960,9 @@ struct DominatingLLVMValue {
 
     // Otherwise, we need an alloca.
     auto align = CharUnits::fromQuantity(
-      CGF.CGM.getDataLayout().getPrefTypeAlignment(value->getType()));
-    Address alloca = CGF.CreateTempAlloca(
-      value->getType(), align, "cond-cleanup.save", nullptr, false);
+              CGF.CGM.getDataLayout().getPrefTypeAlignment(value->getType()));
+    Address alloca =
+      CGF.CreateTempAlloca(value->getType(), align, "cond-cleanup.save");
     CGF.Builder.CreateStore(value, alloca);
 
     return saved_type(alloca.getPointer(), true);
